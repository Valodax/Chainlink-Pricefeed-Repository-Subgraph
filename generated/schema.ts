// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class PriceDataFeed extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PriceDataFeed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type PriceDataFeed must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PriceDataFeed", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): PriceDataFeed | null {
    return changetype<PriceDataFeed | null>(
      store.get_in_block("PriceDataFeed", id.toHexString())
    );
  }

  static load(id: Bytes): PriceDataFeed | null {
    return changetype<PriceDataFeed | null>(
      store.get("PriceDataFeed", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get feedInfo(): InfoLoader {
    return new InfoLoader(
      "PriceDataFeed",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "feedInfo"
    );
  }

  get feedPrices(): PriceLoader {
    return new PriceLoader(
      "PriceDataFeed",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "feedPrices"
    );
  }
}

export class Info extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Info entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Info must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Info", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Info | null {
    return changetype<Info | null>(
      store.get_in_block("Info", id.toHexString())
    );
  }

  static load(id: Bytes): Info | null {
    return changetype<Info | null>(store.get("Info", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get feed(): Bytes {
    let value = this.get("feed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set feed(value: Bytes) {
    this.set("feed", Value.fromBytes(value));
  }

  get phaseId(): i32 {
    let value = this.get("phaseId");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set phaseId(value: i32) {
    this.set("phaseId", Value.fromI32(value));
  }

  get asset(): string | null {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set asset(value: string | null) {
    if (!value) {
      this.unset("asset");
    } else {
      this.set("asset", Value.fromString(<string>value));
    }
  }

  get assetAddress(): Bytes {
    let value = this.get("assetAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set assetAddress(value: Bytes) {
    this.set("assetAddress", Value.fromBytes(value));
  }

  get denomination(): string | null {
    let value = this.get("denomination");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set denomination(value: string | null) {
    if (!value) {
      this.unset("denomination");
    } else {
      this.set("denomination", Value.fromString(<string>value));
    }
  }

  get denominationAddress(): Bytes {
    let value = this.get("denominationAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set denominationAddress(value: Bytes) {
    this.set("denominationAddress", Value.fromBytes(value));
  }

  get timeCreated(): BigInt {
    let value = this.get("timeCreated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timeCreated(value: BigInt) {
    this.set("timeCreated", Value.fromBigInt(value));
  }

  get timeDeprecated(): BigInt | null {
    let value = this.get("timeDeprecated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timeDeprecated(value: BigInt | null) {
    if (!value) {
      this.unset("timeDeprecated");
    } else {
      this.set("timeDeprecated", Value.fromBigInt(<BigInt>value));
    }
  }

  get live(): boolean {
    let value = this.get("live");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set live(value: boolean) {
    this.set("live", Value.fromBoolean(value));
  }
}

export class Price extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Price entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Price must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Price", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Price | null {
    return changetype<Price | null>(
      store.get_in_block("Price", id.toHexString())
    );
  }

  static load(id: Bytes): Price | null {
    return changetype<Price | null>(store.get("Price", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get feed(): Bytes {
    let value = this.get("feed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set feed(value: Bytes) {
    this.set("feed", Value.fromBytes(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get roundId(): BigInt {
    let value = this.get("roundId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set roundId(value: BigInt) {
    this.set("roundId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }
}

export class InfoLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Info[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Info[]>(value);
  }
}

export class PriceLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Price[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Price[]>(value);
  }
}
